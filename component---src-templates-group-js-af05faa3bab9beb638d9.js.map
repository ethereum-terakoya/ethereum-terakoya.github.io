{"version":3,"sources":["webpack:///./src/templates/group.js","webpack:///./src/components/seo.js"],"names":["Category","pageContext","data","intl","useIntl","group","toUpperCase","title","className","formatMessage","id","allMdx","edges","map","node","post","key","frontmatter","slug","md","date","to","parent","relativeDirectory","SEO","description","children","image","site","ogImageDefault","useStaticQuery","ogImage","siteMetadata","siteUrl","concat","childImageSharp","fixed","src","ogUrl","window","location","href","titleTemplate","name","content","property","author"],"mappings":"2FAAA,oHAqDeA,UAzCE,IAA4B,IAA3B,YAAEC,EAAF,KAAeC,GAAW,EAC1C,MAAMC,EAAOC,cACPC,EAAQJ,EAAYI,MAAMC,cAEhC,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKC,MAAOF,IACZ,kBAAC,IAAD,CAAWG,UAAU,QACnB,kBAAC,IAAD,CAAKA,UAAU,QACb,kBAAC,IAAD,KACE,wBAAIA,UAAU,oBACXL,EAAKM,cAAc,CAAEC,GAAG,aAAcT,EAAYI,QADrD,IAGGF,EAAKM,cAAc,CAAEC,GAAI,WAE5B,2BAAIP,EAAKM,cAAc,CAAEC,GAAI,aAGjC,wBAAIF,UAAU,iBACXN,EAAKS,OAAOC,MAAMC,IAAI,QAAGC,KAAMC,GAAT,SACrB,wBAAIC,IAAKD,EAAKE,YAAYC,KAAMV,UAAU,kBACxC,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKW,GAAI,GAAIJ,EAAKE,YAAYG,MAC9B,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEC,GAAE,IAAMpB,EAAYI,MAAlB,IAA2BU,EAAKO,OAAOC,mBAEzC,uBAAGf,UAAU,uBACVO,EAAKE,YAAYV,kB,kCCxCxC,iDAsDeiB,IAlDH,IAA8C,IAA7C,YAAEC,EAAF,SAAeC,EAAf,MAAyBnB,EAAzB,MAAgCoB,GAAY,EACvD,MAAM,KAAEC,EAAF,eAAQC,GAAmBC,yBAAe,cAsB1CC,EAAUJ,EACZC,EAAKI,aAAaC,QAAQC,OAAOP,GACjCC,EAAKI,aAAaC,QAAQC,OACxBL,EAAeM,gBAAgBC,MAAMC,KAGrCC,EAA0B,oBAAXC,OAAyBA,OAAOC,SAASC,KAAO,GAErE,OACE,kBAAC,IAAD,CAAQlC,MAAOA,EAAOmC,cAAa,QAAUd,EAAKI,aAAazB,OAC7D,0BAAMoC,KAAK,cAAcC,QAASnB,IAClC,0BAAMoB,SAAS,WAAWD,QAASrC,EAAOS,IAAI,UAC9C,0BAAM6B,SAAS,iBAAiBD,QAASnB,IACzC,0BAAMoB,SAAS,WAAWD,QAASb,EAASf,IAAI,UAChD,0BAAM6B,SAAS,UAAUD,QAAQ,YACjC,0BAAMC,SAAS,eAAeD,QAAShB,EAAKI,aAAazB,QACzD,0BAAMsC,SAAS,SAASD,QAASN,IACjC,0BAAMK,KAAK,eAAeC,QAAQ,sBAAsB5B,IAAI,cAC5D,0BAAM2B,KAAK,kBAAkBC,QAAShB,EAAKI,aAAac,SACxD,0BAAMH,KAAK,gBAAgBC,QAASrC,IACpC,0BAAMoC,KAAK,gBAAgBC,QAASb,IACpC,0BAAMY,KAAK,sBAAsBC,QAASnB,IACzCC","file":"component---src-templates-group-js-af05faa3bab9beb638d9.js","sourcesContent":["import React from \"react\";\nimport { graphql } from \"gatsby\";\nimport { LocalizedLink } from \"gatsby-theme-i18n\";\nimport { useIntl } from \"react-intl\";\n\nimport Col from \"react-bootstrap/Col\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\n\nimport Layout from \"../components/layout\";\nimport SEO from \"../components/seo\";\n\nconst Category = ({ pageContext, data }) => {\n  const intl = useIntl();\n  const group = pageContext.group.toUpperCase();\n\n  return (\n    <Layout>\n      <SEO title={group} />\n      <Container className=\"py-5\">\n        <Row className=\"mb-5\">\n          <Col>\n            <h1 className=\"font-weight-bold\">\n              {intl.formatMessage({ id: `groupName_${pageContext.group}` })}\n              &nbsp;\n              {intl.formatMessage({ id: \"group\" })}\n            </h1>\n            <p>{intl.formatMessage({ id: \"posts\" })}</p>\n          </Col>\n        </Row>\n        <ul className=\"list-unstyled\">\n          {data.allMdx.edges.map(({ node: post }) => (\n            <li key={post.frontmatter.slug} className=\"post-list-item\">\n              <Row>\n                <Col md={3}>{post.frontmatter.date}</Col>\n                <Col>\n                  <LocalizedLink\n                    to={`/${pageContext.group}/${post.parent.relativeDirectory}`}\n                  >\n                    <b className=\"h3 font-weight-bold\">\n                      {post.frontmatter.title}\n                    </b>\n                  </LocalizedLink>\n                </Col>\n              </Row>\n            </li>\n          ))}\n        </ul>\n      </Container>\n    </Layout>\n  );\n};\n\nexport default Category;\n\nexport const query = graphql`\n  query($locale: String!, $group: String!, $dateFormat: String!) {\n    allMdx(\n      filter: {\n        fields: { locale: { eq: $locale } }\n        frontmatter: { group: { eq: $group } }\n      }\n      sort: { fields: [frontmatter___date], order: DESC }\n    ) {\n      edges {\n        node {\n          frontmatter {\n            slug\n            title\n            date(formatString: $dateFormat)\n          }\n          parent {\n            ... on File {\n              relativeDirectory\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n","import React from \"react\";\nimport { Helmet } from \"react-helmet\";\nimport { graphql, useStaticQuery } from \"gatsby\";\n\nconst SEO = ({ description, children, title, image }) => {\n  const { site, ogImageDefault } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            author\n            siteUrl\n            title\n          }\n        }\n        ogImageDefault: file(relativePath: { eq: \"header.jpg\" }) {\n          childImageSharp {\n            fixed(width: 1200) {\n              src\n            }\n          }\n        }\n      }\n    `\n  );\n\n  const ogImage = image\n    ? site.siteMetadata.siteUrl.concat(image)\n    : site.siteMetadata.siteUrl.concat(\n        ogImageDefault.childImageSharp.fixed.src\n      );\n\n  const ogUrl = typeof window !== \"undefined\" ? window.location.href : \"\";\n\n  return (\n    <Helmet title={title} titleTemplate={`%s | ${site.siteMetadata.title}`}>\n      <meta name=\"description\" content={description} />\n      <meta property=\"og:title\" content={title} key=\"title\" />\n      <meta property=\"og:description\" content={description} />\n      <meta property=\"og:image\" content={ogImage} key=\"image\" />\n      <meta property=\"og:type\" content=\"website\" />\n      <meta property=\"og:site_name\" content={site.siteMetadata.title} />\n      <meta property=\"og:url\" content={ogUrl} />\n      <meta name=\"twitter:card\" content=\"summary_large_image\" key=\"misc-card\" />\n      <meta name=\"twitter:creator\" content={site.siteMetadata.author} />\n      <meta name=\"twitter:title\" content={title} />\n      <meta name=\"twitter:image\" content={ogImage} />\n      <meta name=\"twitter:description\" content={description} />\n      {children}\n    </Helmet>\n  );\n};\n\nexport default SEO;\n"],"sourceRoot":""}