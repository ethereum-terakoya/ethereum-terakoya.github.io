{"version":3,"sources":["webpack:///./src/templates/group.js","webpack:///./src/components/seo.js"],"names":["Category","pageContext","data","intl","useIntl","group","toUpperCase","title","className","formatMessage","id","allMdx","edges","map","post","node","key","frontmatter","slug","md","date","to","parent","relativeDirectory","query","SEO","description","children","site","useStaticQuery","titleTemplate","siteMetadata","name","content","property","siteUrl","author"],"mappings":"2FAAA,0JAmDeA,UAvCE,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,YAAaC,EAAW,EAAXA,KACzBC,EAAOC,cACPC,EAAQJ,EAAYI,MAAMC,cAEhC,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKC,MAAOF,IACZ,kBAAC,IAAD,CAAWG,UAAU,QACnB,kBAAC,IAAD,CAAKA,UAAU,QACb,kBAAC,IAAD,KACE,wBAAIA,UAAU,oBACXH,EADH,IACWF,EAAKM,cAAc,CAAEC,GAAI,WAEpC,2BAAIP,EAAKM,cAAc,CAAEC,GAAI,aAGjC,wBAAIF,UAAU,iBACXN,EAAKS,OAAOC,MAAMC,KAAI,gBAASC,EAAT,EAAGC,KAAH,OACrB,wBAAIC,IAAKF,EAAKG,YAAYC,KAAMV,UAAU,kBACxC,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKW,GAAI,GAAIL,EAAKG,YAAYG,MAC9B,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEC,GAAE,IAAMpB,EAAYI,MAAlB,IAA2BS,EAAKQ,OAAOC,mBAEzC,uBAAGf,UAAU,kCACVM,EAAKG,YAAYV,kBAejC,IAAMiB,EAAK,c,kCCrDlB,iDAqCeC,IAjCH,SAAC,GAAsC,IAApCC,EAAmC,EAAnCA,YAAaC,EAAsB,EAAtBA,SAAUpB,EAAY,EAAZA,MAC5BqB,EAASC,yBAAe,cAAxBD,KAeR,OACE,kBAAC,IAAD,CAAQrB,MAAOA,EAAOuB,cAAa,QAAUF,EAAKG,aAAaxB,OAC7D,0BAAMyB,KAAK,cAAcC,QAASP,IAClC,0BAAMQ,SAAS,WAAWD,QAAS1B,IACnC,0BAAM2B,SAAS,iBAAiBD,QAASP,IACzC,0BAAMQ,SAAS,UAAUD,QAAQ,YACjC,0BAAMC,SAAS,eAAeD,QAASL,EAAKG,aAAaxB,QACzD,0BAAM2B,SAAS,SAASD,QAASL,EAAKG,aAAaI,UACnD,0BAAMH,KAAK,eAAeC,QAAQ,YAClC,0BAAMD,KAAK,kBAAkBC,QAASL,EAAKG,aAAaK,SACxD,0BAAMJ,KAAK,gBAAgBC,QAAS1B,IACpC,0BAAMyB,KAAK,sBAAsBC,QAASP,IACzCC","file":"component---src-templates-group-js-ceebbd2da70acfa64d21.js","sourcesContent":["import React from \"react\";\nimport { graphql } from \"gatsby\";\nimport { LocalizedLink } from \"gatsby-theme-i18n\";\nimport { useIntl } from \"react-intl\";\n\nimport Col from \"react-bootstrap/Col\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\n\nimport Layout from \"../components/layout\";\nimport SEO from \"../components/seo\";\n\nconst Category = ({ pageContext, data }) => {\n  const intl = useIntl();\n  const group = pageContext.group.toUpperCase();\n\n  return (\n    <Layout>\n      <SEO title={group} />\n      <Container className=\"py-5\">\n        <Row className=\"mb-5\">\n          <Col>\n            <h1 className=\"font-weight-bold\">\n              {group} {intl.formatMessage({ id: \"group\" })}\n            </h1>\n            <p>{intl.formatMessage({ id: \"posts\" })}</p>\n          </Col>\n        </Row>\n        <ul className=\"list-unstyled\">\n          {data.allMdx.edges.map(({ node: post }) => (\n            <li key={post.frontmatter.slug} className=\"post-list-item\">\n              <Row>\n                <Col md={3}>{post.frontmatter.date}</Col>\n                <Col>\n                  <LocalizedLink\n                    to={`/${pageContext.group}/${post.parent.relativeDirectory}`}\n                  >\n                    <b className=\"h3 font-weight-bold text-black\">\n                      {post.frontmatter.title}\n                    </b>\n                  </LocalizedLink>\n                </Col>\n              </Row>\n            </li>\n          ))}\n        </ul>\n      </Container>\n    </Layout>\n  );\n};\n\nexport default Category;\n\nexport const query = graphql`\n  query($locale: String!, $group: String!, $dateFormat: String!) {\n    allMdx(\n      filter: {\n        fields: { locale: { eq: $locale } }\n        frontmatter: { group: { eq: $group } }\n      }\n      sort: { fields: [frontmatter___date], order: DESC }\n    ) {\n      edges {\n        node {\n          frontmatter {\n            slug\n            title\n            date(formatString: $dateFormat)\n          }\n          parent {\n            ... on File {\n              relativeDirectory\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n","import React from \"react\";\nimport { Helmet } from \"react-helmet\";\nimport { graphql, useStaticQuery } from \"gatsby\";\n\nconst SEO = ({ description, children, title }) => {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            author\n            siteUrl\n            title\n          }\n        }\n      }\n    `\n  );\n\n  return (\n    <Helmet title={title} titleTemplate={`%s | ${site.siteMetadata.title}`}>\n      <meta name=\"description\" content={description} />\n      <meta property=\"og:title\" content={title} />\n      <meta property=\"og:description\" content={description} />\n      <meta property=\"og:type\" content=\"website\" />\n      <meta property=\"og:site_name\" content={site.siteMetadata.title} />\n      <meta property=\"og:url\" content={site.siteMetadata.siteUrl} />\n      <meta name=\"twitter:card\" content=\"summary\" />\n      <meta name=\"twitter:creator\" content={site.siteMetadata.author} />\n      <meta name=\"twitter:title\" content={title} />\n      <meta name=\"twitter:description\" content={description} />\n      {children}\n    </Helmet>\n  );\n};\n\nexport default SEO;\n"],"sourceRoot":""}